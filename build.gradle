plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.163'
}

setVersion(mod_version)
setGroup(mod_group)

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    data {
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version,
            neoforge_version    : neoforge_version,
            mod_id              : mod_id,
            mod_name            : mod_name,
            mod_version         : mod_version,
            mod_author          : mod_author,
            mod_description     : mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// Task to copy JAR to Desktop after build
tasks.register('copyJarToDesktop', Copy) {
    dependsOn build
    from file("${layout.buildDirectory.get()}/libs/${mod_id}-${mod_version}.jar")
    into file(System.getProperty("user.home") + "/Desktop")
    rename { String fileName ->
        "${mod_name.replace(' ', '-')}-${mod_version}.jar"
    }
    doLast {
        println "âœ… JAR copied to Desktop: ${System.getProperty("user.home")}/Desktop/${mod_name.replace(' ', '-')}-${mod_version}.jar"
    }
}

// Automatically run copyJarToDesktop after build
build.finalizedBy copyJarToDesktop

